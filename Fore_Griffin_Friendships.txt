--  Query: Create 6 new users  --
SELECT * FROM users;

INSERT INTO users (first_name,last_name,created_at,updated_at) 
VALUES ('Gordon','Freeman',NOW(),NOW()),
('Barney','Calhoun',NOW(),NOW()),
('Eli','Vance',NOW(),NOW()),
('Alex','Vance',NOW(),NOW()),
('Isaac','Kleiner',NOW(),NOW()),
('Wallace','Breen',NOW(),NOW());

--  Query: Have user 1 be friends with user 2, 4 and 6  --

INSERT INTO friendships (user_id,friend_id,created_at,updated_at) VALUES (1,2,NOW(),NOW());
INSERT INTO friendships (user_id,friend_id,created_at,updated_at) VALUES (1,4,NOW(),NOW()),(1,6,NOW(),NOW());


--  Query: Have user 2 be friends with user 1, 3 and 5  --

INSERT INTO friendships (user_id,friend_id,created_at,updated_at) VALUES (2,1,NOW(),NOW()),(2,3,NOW(),NOW()),(2,5,NOW(),NOW());


--  Query: Have user 3 be friends with user 2 and 5  --

INSERT INTO friendships (user_id,friend_id,created_at,updated_at) VALUES (3,2,NOW(),NOW()),(3,5,NOW(),NOW());


--  Query: Have user 4 be friends with user 3  --

INSERT INTO friendships (user_id,friend_id,created_at,updated_at) VALUES (4,3,NOW(),NOW());


--  Query: Have user 5 be friends with user 1 and 6  --

INSERT INTO friendships (user_id,friend_id,created_at,updated_at) VALUES (5,1,NOW(),NOW()),(5,6,NOW(),NOW());


--  Query: Have user 6 be friends with user 2 and 3  --

INSERT INTO friendships (user_id,friend_id,created_at,updated_at) VALUES (6,2,NOW(),NOW()),(6,3,NOW(),NOW());


--  Query: Display the relationships created as shown in the table in the above image  --

SELECT users.first_name as first_name, users.last_name as last_name, friends.first_name as friend_first_name, friends.last_name as friend_last_name FROM users
JOIN friendships ON user_id = users.id
JOIN users as friends ON friends.id = friendships.friend_id;


--  NINJA Query: Return all users who are friends with the first user, make sure their names are displayed in results.  --

SELECT * FROM users
LEFT JOIN friendships ON user_id = users.id
LEFT JOIN users AS friends ON friends.id = friendships.friend_id
WHERE users.id = 1;


--  NINJA Query: Return the count of all friendships  --


--  NINJA Query: Find out who has the most friends and return the count of their friends.  --


--  NINJA Query: Return the friends of the third user in alphabetical order  --